[{"authors":null,"categories":null,"content":"We\u0026rsquo;ve been working for some time doing Continuous Delivery in our teams, and we found that managing feature toggles in our code was a challenge. Not only because toggles are complex to implement properly and each of us implemented their toggles in different ways, but also because toggles evolved rapidly when we were releasing new features.\nA good example of the evolution of a toggle would be to, first, enable our new shiny feature for a subset of users. When the feature has been probed with a subset of the customers, we can enable it for a bigger set of customers (probably multiple countries). However, we want to make sure that the new feature doesn\u0026rsquo;t break the system that is already in production, so we would want to disable it in case the new service that we depend on is down. After testing the new feature under a big load, we might want to progressively enable it to all customers, but with the ability to disable it quickly to all of our customers if we find something problematic (like a security bug). At the end, we want to just enable the feature for all customers and clean up the feature toggle.\nHowever, managing this flow manually is really complex, is error prone and messes up with the code. For example, we would have with something like:\nvar myRelease = feaggle.release(\u0026quot;MY_RELEASE\u0026quot;); var myExperiment = feaggle.experiment(\u0026quot;MY_RELEASE\u0026quot;); if (myRelease.isEnabled() \u0026amp;\u0026amp; myExperiment.isEnabledFor(myCurrentUser)) { newShinyFeature(); }  That later would evolve to:\nvar myRelease = feaggle.release(\u0026quot;MY_RELEASE\u0026quot;); var myExperiment = feaggle.experiment(\u0026quot;MY_EXPERIMENT\u0026quot;); var reportsService = feaggle.operational(\u0026quot;REPORTS_SERVICE_IS_UP\u0026quot;); if (myRelease.isEnabled() \u0026amp;\u0026amp; myExperiment.isEnabledFor(myCurrentUser) \u0026amp;\u0026amp; reportsService.isEnabled()) { newShinyFeature(); }  We found that every change to our rollout strategy would mean that we changed the code that was in production, meaning that we could break it (spoiler, we broke it).\nWe though that having some kind of abstraction over a feature, that could evolve during the lifetime of the feature, was necessary. That\u0026rsquo;s why we came up with the concept of drum-roll Epic.\nSo, what is an epic itself? An epic aggregates a set of toggles (of different types) and is enabled only if all toggles inside the epic are enabled for a cohort. Building an epic is quite easy:\nEpic\u0026lt;MyCohort\u0026gt; epic = feaggle.epic() .release(feaggle.release(\u0026quot;MY_RELEASE\u0026quot;)) // you can add more than one release toggle, just calling .release again .experiment(feaggle.experiment(\u0026quot;MY_EXPERIMENT\u0026quot;)) // also, you can add more than one experiment with .experiment .operational(feaggle.operational(\u0026quot;REPORTS_SERVICE_IS_UP\u0026quot;)) // also here :D .build(); // usage: if (epic.isEnabledFor(myCurrentUser)) { newShinyFeature(); }  There are several awesome features from epics that will let you fall in love with them:\n Epics are lazy. They will evaluate toggles by complexity until finds one that is disabled. For example, if a release is turned off, the epic won\u0026rsquo;t call any experiment or operational toggle. Epics are configured once and can be injected, if you want to change how they work, just reconfigure them. Epics are unaware of how other toggles work. You can use epics with toggles that are stored in your database with feaggle-jdbc or toggles in memory. Your epic won\u0026rsquo;t change.  We believe that epics will be a game changer on how we do Continuous Deliver, as we have more power on how we release our features without sacrificing ease. You can start using epics in feaggle 2.0.0: despite the major version, it\u0026rsquo;s backwards compatible to feaggle 1.x and feaggle-jdbc!\nRead more information on how to use feaggle in the the feaggle repository and remember that if you have any feedback or suggestion,please fill us an issue so we can keep track of them üòç.\n","date":1551830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551830400,"objectID":"5956b2424addef70476ce8f2f1c6267e","permalink":"http://feaggle.github.io/blog/welcome-epics/","publishdate":"2019-03-06T00:00:00Z","relpermalink":"/blog/welcome-epics/","section":"blog","summary":"We\u0026rsquo;ve been working for some time doing Continuous Delivery in our teams, and we found that managing feature toggles in our code was a challenge. Not only because toggles are complex to implement properly and each of us implemented their toggles in different ways, but also because toggles evolved rapidly when we were releasing new features.\nA good example of the evolution of a toggle would be to, first, enable our new shiny feature for a subset of users.","tags":null,"title":"Welcome, Epics!","type":"blog"},{"authors":null,"categories":null,"content":" feaggle is a library that simplifies a process: continuous delivery. The main idea of feaggle is to wrap new features that are under development, so they can be enabled or disabled to a subset of your customers. This allows teams to get quality feedback faster and easens the burden of managing feature toggles.\nWe designed feaggle with simplicity and security in mind, that\u0026rsquo;s why:\n Toggle configuration is done just once, and decoupled from the usage of the toggle. We promote a centralised configuration, outside production code. Changing the status of a toggle doesn\u0026rsquo;t mean changing where we are using the toggle. We believe that releasing features can be done without deploying new code, just changing a toggle. That\u0026rsquo;s why we support hot reloading in our jdbc module. Just plain Java, no annotations, no reflection. Can be used in any JVM language, compiles with Java 8, and runs in the GraalVM.  Installing feaggle feaggle is published regularly in jcenter, so it can be retrieved using gradle:\nrepositories { // ... jcenter() // ... } depedencies { compile 'io.feaggle:feaggle:2.0.0' }  Right now the latest version is: \nHow to use feature toggles If you already have experience with feature toggles and you want to start right with the code, please go to the configuring feaggle section. If you want to refresh some knowledge or you are just starting from scratch on using feature toggles, welcome! We will go through the process of using toggles in our production code and how to release incrementally a feature. We will be also exploring different types of toggles so we know which one to use in which circumstances.\nUsually you want to release new features incrementally because allows you to:\n Verify that the feature works for a subset of your customers. Verify that the feature brings business value without implementing the whole epic. Avoid integration issues with other components, as the code is pushed as soon as possible to production.  Let\u0026rsquo;s say that we want to implement a new version of a feature: a new reporting integration that will allow us to get more information about the billing on our platform. Right now our code looks like:\n@Get(\u0026quot;/report\u0026quot;) public Object getMyBillingReports(User user) { return reports.getReportForUser(user.getId()); }  Sadly, the new reporting service is still under development and lacks some important features. After some investigation we\u0026rsquo;ve found that probably we can release the integration that we have for just a subset of our users: all users that are not premium. It looks like those features are only used for premium users, so we can release earlier!\nWe might want to do something like this:\n@Get(\u0026quot;/report\u0026quot;) public Object getMyBillingReports(User user) { if (user.isNotPremium()) { return newReports.getReport(user); } else { return reports.getReportForUser(user.getId()); } }  However we\u0026rsquo;ve found that the new service is not handling all the load and we overloaded it. It\u0026rsquo;s reasonable to do two things:\n Find a way to easy disable the toggle for everyone if we have problems with the new reporting service. Rollout the feature to a subset of the non-premium users and be able to increase the number of users with access.  The easiest option right now would be:\n@Get(\u0026quot;/report\u0026quot;) public Object getMyBillingReports(User user) { if (isNewReportFeatureEnabled \u0026amp;\u0026amp; user.isNotPremium() \u0026amp;\u0026amp; Math.random() \u0026lt; 0.2f) { // not evenly distributed, but aprox 20% of load. return newReports.getReport(user); } else { return reports.getReportForUser(user.getId()); } }  It would be even harder if we want to make a healthcheck to the new reports service to make it work. However, to reduce complexity, we can keep it like that.\nAt the end, when the new reporting service is ready and has all the features from all types of users, we can start rolling out to all customers:\n@Get(\u0026quot;/report\u0026quot;) public Object getMyBillingReports(User user) { if (isNewReportFeatureEnabled \u0026amp;\u0026amp; Math.random() \u0026lt; 0.5f) { // not evenly distributed, but aprox 50% of load. return newReports.getReport(user); } else { return reports.getReportForUser(user.getId()); } }  And finally, we can release to everyone:\n@Get(\u0026quot;/report\u0026quot;) public Object getMyBillingReports(User user) { return newReports.getReport(user); // we might want in some situations to keep the toggle to disable it in case of a failure }  Configuring feaggle Configuring feaggle depends on which module are you using. In this getting started guide, we are going to assume that you want to use only the core features of feaggle. If you want to store your toggles in a SQL database you might want to take a look at feaggle-jdbc. However, we recommend you to do the complete Getting Started guide and then move to the jdbc module.\nTo configure feaggle, we need what is called a DriverLoader. A DriverLoader allows feaggle to build the necessary infrastructure to keep track of any kind of toggle. In feaggle, there are three types of toggles:\n ReleaseToggle allows you to enable or disable a feature completely. ExperimentToggle allows you to enable or disable a feature for a subset of the users. They require a ExperimentCohort which represents the properties of a subset of useres. OperationalToggle allows you to enable or disable a feature depending on the status of the application. For example, you might want to disable a feature if your application is getting out of disk (or gracefully degrade to another service), if an external endpoint is down, or the cpu usage is dangerous.  To create a DriverLoader, you will need to use the BasicDriverLoader class, which exposes a builder to simplify the creation of any kind of toggle.\nBasicDriverLoader.builder() .releases(...) .experiments(...) .operationals(...) .build()  A BasicDriverLoader up to three drivers, one for each type of toggle. If you want to use only releases, you can just skip calling the .experiments and .operational methods.\nLet\u0026rsquo;s start with releases.\nReleases Releases need a ReleaseDriver, that will configure toggles to use the appropiate information. Conveniently, feaggle comes with a BasicReleaseDriver that allows to set up, in memory, all our releases, so they can be used later.\nBasicReleaseDriver.builder() .release(ENABLED_RELEASE, true) .release(DISABLED_RELEASE, false) .build()  For example, the configuration would look like:\nvar releases = BasicReleaseDriver.builder() .release(ENABLED_RELEASE, true) .release(DISABLED_RELEASE, false) .build(); BasicDriverLoader.builder() .releases(releases) .build()  Experiments Experiments are a bit more complicated, because they need a cohort. A Cohort is just a subset of the users, defined by common properties. First, you will need to define your Cohort (a class with all common properties to all users, where you will create segments) implementing the ExperimentCohort interface. For example, for our reporting application, we would like to segment by paid users and by the country.\npublic class Cohort implements ExperimentCohort { public final String userId; public final String countryCode; public final boolean isPremium; ... @Override public String identifier() { return userId; } }  With the Cohort, we can start defining experiments with the BasicExperimentDriver:\nBasicExperimentDriver.\u0026lt;Cohort\u0026gt;builder() .experiment( Experiment.\u0026lt;Cohort\u0026gt;builder() .toggle(\u0026quot;my-experiment\u0026quot;) .segment(cohort -\u0026gt; cohort.countryCode == \u0026quot;P\u0026quot;) // this experiment is only enabled for users in Portugal .enabled(true) .build() ) .experiment( Experiment.\u0026lt;Cohort\u0026gt;builder() .toggle(\u0026quot;my-experiment-2\u0026quot;) .segment(cohort -\u0026gt; cohort.isPremium) // this experiment is enabled for premium users .segment(Rollout.\u0026lt;Cohort\u0026gt;builder().percentage(25).build()) // but only a random 25% percent of them .enabled(true) .build() ) .build()  At the end, your configuration would look like:\nvar experiments = BasicExperimentDriver.\u0026lt;Cohort\u0026gt;builder() .experiment( Experiment.\u0026lt;Cohort\u0026gt;builder() .toggle(\u0026quot;my-experiment\u0026quot;) .segment(cohort -\u0026gt; cohort.countryCode == \u0026quot;P\u0026quot;) // this experiment is only enabled for users in Portugal .enabled(true) .build() ) .experiment( Experiment.\u0026lt;Cohort\u0026gt;builder() .toggle(\u0026quot;my-experiment-2\u0026quot;) .segment(cohort -\u0026gt; cohort.isPremium) // this experiment is enabled for premium users .segment(Rollout.\u0026lt;Cohort\u0026gt;builder().percentage(25).build()) // but only a random 25% percent of them .enabled(true) .build() ) .build() BasicDriverLoader.builder() .experiments(experiments) .build()  Operational Toggles Operational toggles allows you to enable a feature based on the system state. Those kind of toggles are based on rules and sensors, that will gather information of the system. For example, if you want to only enable a feature if the peer service is on, you would do:\nOperationalDriver.builder() .rule( Rule.builder() .toggle(TOGGLE_NAME) .enabled(true) .sensor(Healthcheck.builder() .check(this::reportingServiceAvailability) // method that checks the remote server is available .interval(1000) // interval in milliseconds between calls .healthyCount(3) // nr of times the healthcheck should be working for being considered healthy .unhealthyCount(2) // nr of times the healthcheck should fail for being considered unhealthy .build()) .build() ).build()  There are several sensors already bundled with feaggle. Some code examples:\nDisk Usage Only enable the feature if the current disk partition has less than 20TB.\nRule.builder() .toggle(TOGGLE_NAME) .sensor(Disk.builder().fileStore(Disk.fileStoreOf(Paths.get(\u0026quot;.\u0026quot;))).predicate(Disk.spaceAvailableIsLessThan(20, Unit.TB)).build()) .enabled(true) .build()  Memory Only enable the feature if the memory usage is more than 1% of the available memory.\nRule.builder() .toggle(TOGGLE_NAME) .sensor(Memory.builder().predicate(Memory.usageIsGreaterThan(1)).build()) .enabled(true) .build()  CPU Only enable the feature if the CPU usage is greater than 1% of the CPU.\nRule.builder() .toggle(TOGGLE_NAME) .sensor(Cpu.builder().predicate(Cpu.usageIsGreaterThan(1)).build()) .enabled(true) .build()  Building a feaggle instance Feaggle has a facade that will set up all the drivers and toggles. This way, for validating that a toggle is enabled, you only need to use a single object that is consistent.\nTo create a Feaggle instance we need to call the .load static method with the created DriverLoader:\nvar driverLoader = BasicDriverLoader.builder() .releases(...) .experiments(...) .operationals(...) .build(); Feaggle\u0026lt;Cohort\u0026gt; feaggle = Feaggle.load(driverLoader);  For checking the status of the toggles there are three methods, one per toggle type. The API is quite simple, so probably is clear with a code example:\n// release toggles feaggle.release(\u0026quot;my-new-cool-release\u0026quot;).isEnabled(); // experiment toggles var cohort = new Cohort(\u0026quot;user-id\u0026quot;, \u0026quot;P\u0026quot;, true); feaggle.experiment(\u0026quot;my-experiment\u0026quot;).isEnabledFor(cohort); // operational toggles feaggle.operational(\u0026quot;my-operational-toggle\u0026quot;).isEnabled();  ","date":1543536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543536000,"objectID":"f85aa3ecad9018a932f3d3bc0b0c139b","permalink":"http://feaggle.github.io/tutorial/getting-started/","publishdate":"2018-11-30T00:00:00Z","relpermalink":"/tutorial/getting-started/","section":"tutorial","summary":"feaggle is a library that simplifies a process: continuous delivery. The main idea of feaggle is to wrap new features that are under development, so they can be enabled or disabled to a subset of your customers. This allows teams to get quality feedback faster and easens the burden of managing feature toggles.\nWe designed feaggle with simplicity and security in mind, that\u0026rsquo;s why:\n Toggle configuration is done just once, and decoupled from the usage of the toggle.","tags":null,"title":"Getting Started","type":"tutorial"}]